// Code generated by MockGen. DO NOT EDIT.
// Source: create_expired_domain.go

// Package googlesheet is a generated GoMock package.
package googlesheet

import (
	postgresql "cdnetwork/pkg/postgresql"
	reflect "reflect"

	"go.uber.org/mock/gomock"
	sheets "google.golang.org/api/sheets/v4"
)

// MockGoogleSheetServiceInterface is a mock of GoogleSheetServiceInterface interface.
type MockGoogleSheetServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleSheetServiceInterfaceMockRecorder
}

// MockGoogleSheetServiceInterfaceMockRecorder is the mock recorder for MockGoogleSheetServiceInterface.
type MockGoogleSheetServiceInterfaceMockRecorder struct {
	mock *MockGoogleSheetServiceInterface
}

// NewMockGoogleSheetServiceInterface creates a new mock instance.
func NewMockGoogleSheetServiceInterface(ctrl *gomock.Controller) *MockGoogleSheetServiceInterface {
	mock := &MockGoogleSheetServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGoogleSheetServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleSheetServiceInterface) EXPECT() *MockGoogleSheetServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateSheet mocks base method.
func (m *MockGoogleSheetServiceInterface) CreateSheet(sheetsService *sheets.Service, spreadsheetId, sheetName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSheet", sheetsService, spreadsheetId, sheetName)
}

// CreateSheet indicates an expected call of CreateSheet.
func (mr *MockGoogleSheetServiceInterfaceMockRecorder) CreateSheet(sheetsService, spreadsheetId, sheetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSheet", reflect.TypeOf((*MockGoogleSheetServiceInterface)(nil).CreateSheet), sheetsService, spreadsheetId, sheetName)
}

// CreateSheetsService mocks base method.
func (m *MockGoogleSheetServiceInterface) CreateSheetsService(key string) *sheets.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSheetsService", key)
	ret0, _ := ret[0].(*sheets.Service)
	return ret0
}

// CreateSheetsService indicates an expected call of CreateSheetsService.
func (mr *MockGoogleSheetServiceInterfaceMockRecorder) CreateSheetsService(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSheetsService", reflect.TypeOf((*MockGoogleSheetServiceInterface)(nil).CreateSheetsService), key)
}

// WriteData mocks base method.
func (m *MockGoogleSheetServiceInterface) WriteData(spreadsheetId string, domains []postgresql.DomainForExcel, writeRangeFunc func() string, valueRangeFunc func([]postgresql.DomainForExcel) *sheets.ValueRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", spreadsheetId, domains, writeRangeFunc, valueRangeFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteData indicates an expected call of WriteData.
func (mr *MockGoogleSheetServiceInterfaceMockRecorder) WriteData(spreadsheetId, domains, writeRangeFunc, valueRangeFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockGoogleSheetServiceInterface)(nil).WriteData), spreadsheetId, domains, writeRangeFunc, valueRangeFunc)
}
