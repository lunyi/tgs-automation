// Code generated by MockGen. DO NOT EDIT.
// Source: tgs-automation/pkg/Cloudflare (interfaces: CloudflareApi)
//
// Generated by this command:
//
//	mockgen -destination pkg/cloudflare/mocks/mock_cloudflare.go -package=cloudflare tgs-automation/pkg/Cloudflare CloudflareApi
//

// Package cloudflare is a generated GoMock package.
package cloudflare

import (
	reflect "reflect"
	util "tgs-automation/internal/util"

	gomock "go.uber.org/mock/gomock"
)

// MockCloudflareApi is a mock of CloudflareApi interface.
type MockCloudflareApi struct {
	ctrl     *gomock.Controller
	recorder *MockCloudflareApiMockRecorder
}

// MockCloudflareApiMockRecorder is the mock recorder for MockCloudflareApi.
type MockCloudflareApiMockRecorder struct {
	mock *MockCloudflareApi
}

// NewMockCloudflareApi creates a new mock instance.
func NewMockCloudflareApi(ctrl *gomock.Controller) *MockCloudflareApi {
	mock := &MockCloudflareApi{ctrl: ctrl}
	mock.recorder = &MockCloudflareApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudflareApi) EXPECT() *MockCloudflareApiMockRecorder {
	return m.recorder
}

// CreateDNS mocks base method.
func (m *MockCloudflareApi) CreateDNS(arg0 util.TgsConfig, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDNS indicates an expected call of CreateDNS.
func (mr *MockCloudflareApiMockRecorder) CreateDNS(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNS", reflect.TypeOf((*MockCloudflareApi)(nil).CreateDNS), arg0, arg1)
}

// DeleteDNS mocks base method.
func (m *MockCloudflareApi) DeleteDNS(arg0 util.TgsConfig, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNS indicates an expected call of DeleteDNS.
func (mr *MockCloudflareApiMockRecorder) DeleteDNS(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNS", reflect.TypeOf((*MockCloudflareApi)(nil).DeleteDNS), arg0, arg1)
}

// GetDnsInfo mocks base method.
func (m *MockCloudflareApi) GetDnsInfo(arg0 util.TgsConfig, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDnsInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDnsInfo indicates an expected call of GetDnsInfo.
func (mr *MockCloudflareApiMockRecorder) GetDnsInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDnsInfo", reflect.TypeOf((*MockCloudflareApi)(nil).GetDnsInfo), arg0, arg1)
}

// GetTargetNameServers mocks base method.
func (m *MockCloudflareApi) GetTargetNameServers(arg0 util.TgsConfig, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetNameServers", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetNameServers indicates an expected call of GetTargetNameServers.
func (mr *MockCloudflareApiMockRecorder) GetTargetNameServers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetNameServers", reflect.TypeOf((*MockCloudflareApi)(nil).GetTargetNameServers), arg0, arg1)
}

// GetZoneId mocks base method.
func (m *MockCloudflareApi) GetZoneId(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneId", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneId indicates an expected call of GetZoneId.
func (mr *MockCloudflareApiMockRecorder) GetZoneId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneId", reflect.TypeOf((*MockCloudflareApi)(nil).GetZoneId), arg0)
}
