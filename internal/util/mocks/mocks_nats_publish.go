// Code generated by MockGen. DO NOT EDIT.
// Source: tgs-automation/internal/util (interfaces: NatsPublisherService)
//
// Generated by this command:
//
//	mockgen -destination mocks/mocks_nats_publish.go -package=util . NatsPublisherService
//

// Package util is a generated GoMock package.
package util

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNatsPublisherService is a mock of NatsPublisherService interface.
type MockNatsPublisherService struct {
	ctrl     *gomock.Controller
	recorder *MockNatsPublisherServiceMockRecorder
}

// MockNatsPublisherServiceMockRecorder is the mock recorder for MockNatsPublisherService.
type MockNatsPublisherServiceMockRecorder struct {
	mock *MockNatsPublisherService
}

// NewMockNatsPublisherService creates a new mock instance.
func NewMockNatsPublisherService(ctrl *gomock.Controller) *MockNatsPublisherService {
	mock := &MockNatsPublisherService{ctrl: ctrl}
	mock.recorder = &MockNatsPublisherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNatsPublisherService) EXPECT() *MockNatsPublisherServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNatsPublisherService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockNatsPublisherServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNatsPublisherService)(nil).Close))
}

// Publish mocks base method.
func (m *MockNatsPublisherService) Publish(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNatsPublisherServiceMockRecorder) Publish(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNatsPublisherService)(nil).Publish), arg0, arg1)
}
